openapi: 3.0.3
info:
  title: simple-scheduler API
  version: 1.0.0
  description: API documentation converted from Postman collection.

servers:
  - url: http://localhost:8080/api/v1

paths:
  /:
    get:
      summary: root "/api/v1"
      responses:
        '200':
          description: API root
          
  /healthz:
    get:
      summary: Check if server is ready
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              example:
                status: "ok"

  /docs.json:
    get:
      summary: Get API docs (json format)
      responses:
        '200':
          description: API docs JSON
          content:
            application/json:
              example:
                openapi: "3.0.3"
                info:
                  title: "simple-scheduler API"
                  version: "1.0.0"

  /facilities:
    post:
      summary: Add a facility with admin user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                facility:
                  type: object
                  properties:
                    facilityName: { type: string }
                user:
                  type: object
                  properties:
                    firstName: { type: string }
                    lastName: { type: string }
                    email: { type: string, format: email }
                    password: { type: string }
                    isAdmin: { type: boolean }
            example:
              facility:
                facilityName: "The Evengers"
              user:
                firstName: "Nick"
                lastName: "Furry"
                email: "nick@email.com"
                password: "myPassword"
                isAdmin: true
      responses:
        '201':
          description: Facility created
          content:
            application/json:
              example:
                facilityId: "fac-1234"
                facilityName: "The Evengers"
                adminUserId: "usr-5678"

  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string }
            example:
              email: "nick@email.com"
              password: "myPassword"
      responses:
        '200':
          description: Login success (returns access & refresh tokens)
          content:
            application/json:
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR..."
                refresh: "eyJhbGciOiJIUzI1NiIsInR..."

  /users:
    post:
      summary: Add new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName: { type: string }
                lastName: { type: string }
                email: { type: string, format: email }
                isAdmin: { type: boolean }
            example:
              firstName: "Natasha"
              lastName: "Romanoff"
              email: "natasha@example.com"
              isAdmin: false
      responses:
        '201':
          description: User created
          content:
            application/json:
              example:
                userId: "791bdbba-0fa3-4fb2-8fa5-ef3e08fb26b8"
                firstName: "Natasha"
                lastName: "Romanoff"
                email: "natasha@example.com"
                isAdmin: false
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              example:
                - userId: "791bdbba-0fa3-4fb2-8fa5-ef3e08fb26b8"
                  firstName: "Natasha"
                  lastName: "Romanoff"
                  email: "natasha@example.com"
                  isAdmin: false
                - userId: "6c882ce2-d747-4766-b282-8cf97fb789cf"
                  firstName: "Steve"
                  lastName: "Rogers"
                  email: "steve@example.com"
                  isAdmin: true

  /refresh:
    post:
      summary: Refresh access token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: New access token
          content:
            application/json:
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR..."

  /revoke:
    post:
      summary: Revoke refresh token
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Token revoked

  /shifts:
    post:
      summary: Create shifts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                year: { type: integer }
                month: { type: integer }
                shifts:
                  type: array
                  items:
                    type: object
                    properties:
                      startTime: { type: string }
                      endTime: { type: string }
                      staff:
                        type: array
                        items:
                          type: object
                          properties:
                            userId: { type: string, format: uuid }
                            days:
                              type: array
                              items: { type: integer }
            example:
              year: 2025
              month: 7
              shifts:
                - startTime: "08:00"
                  endTime: "12:00"
                  staff:
                    - userId: "791bdbba-0fa3-4fb2-8fa5-ef3e08fb26b8"
                      days: [1,2,3,4,7,8,9,10]
                    - userId: "6c882ce2-d747-4766-b282-8cf97fb789cf"
                      days: [9,10,11,12,15,16,17,18]
                - startTime: "12:00"
                  endTime: "16:00"
                  staff:
                    - userId: "4ad59cfd-0693-4685-91e0-824c53d81869"
                      days: [12,13,14,15,18,19,20,21]
                    - userId: "7bc03ee0-6fa8-40ff-ad03-a6e4a8fc58b5"
                      days: [16,17,18,19,22,23,24,25]
      responses:
        '201':
          description: Shifts created
          content:
            application/json:
              example:
                shiftBatchId: "shf-batch-2025-07"
                created: true
    get:
      summary: Get current month shifts
      security:
        - bearerAuth: []
      parameters:
        - name: year
          in: query
          required: false
          schema: { type: integer }
        - name: month
          in: query
          required: false
          schema: { type: integer }
      responses:
        '200':
          description: Shifts list
          content:
            application/json:
              example:
                - shiftId: "shf-123"
                  startTime: "08:00"
                  endTime: "12:00"
                  staff:
                    - userId: "791bdbba-0fa3-4fb2-8fa5-ef3e08fb26b8"
                      days: [1,2,3,4,7,8,9,10]
                - shiftId: "shf-124"
                  startTime: "12:00"
                  endTime: "16:00"
                  staff:
                    - userId: "7bc03ee0-6fa8-40ff-ad03-a6e4a8fc58b5"
                      days: [16,17,18,19,22,23,24,25]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
